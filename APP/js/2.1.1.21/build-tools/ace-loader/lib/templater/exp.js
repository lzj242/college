const expression=require("./lib/expression"),text=require("./lib/text"),{DEVICE_LEVEL:DEVICE_LEVEL}=require("../lite/lite-enum"),card=process.env.DEVICE_LEVEL===DEVICE_LEVEL.CARD,REG_CARD_ARRAY=/(\['.+?'\])|(\[".+?"\])/g;function transExp(r,t){let e=r.toString().trim();return isExp(e)&&(e=parseExp(e,t)),e}function parseExp(value,functionFlag){const textArray=text.parseText(value),explist=[];for(let r=0;r<textArray.length;r++){const t=textArray[r];let e;t.tag?(e=card?`{{${transCardArray(t.value)}}}`:expression.parseExpression(t.value),1===textArray.length||card||(e=`(${e})`)):e=card?t.value:`'${t.value}'`,explist.push(e)}let func=explist.join(card?"":" + ");return!1===functionFlag||card||(func=eval("(function () {return "+func+"})")),func=card&&textArray.length>1?"$f("+func+")":func,func}function transExpForList(r){let t=r.toString().trim();return containExp(t)&&(t=parseExpList(t)),t}function parseExpList(r){const t=r.match(/{{{([\s\S]+?)}}}|{{([\s\S]+?)}}/g);let e=0;const n=[];return r.replace(/{{{([\s\S]+?)}}}|{{([\s\S]+?)}}/g,"&e").split(/\s+/).forEach(r=>{if(r.indexOf("&e")>=0){for(;r.indexOf("&e")>=0;)r=r.replace("&e",t[e++]);const s=text.parseText(r),a=[];s&&(s.forEach(function(r){const t=r.tag?card?`{{${r.value}}}`:expression.parseExpression(r.value):card?r.value:`'${r.value}'`;a.push(t)}),n.push(a.join("+")))}else{const t=card?r:`'${r}'`;n.push(t)}}),card?n:"(function () {return ["+n.join(", ")+"]})"}function isExp(r){return/{{{([\s\S]+?)}}}|{{([\s\S]+?)}}/.test(r)}function containExp(r){return/{{{([\s\S]+?)}}}|{{([\s\S]+?)}}/g.test(r)}function removeAllExpFix(r){return containExp(r)?r.replace(/\{\{\{?|\}\}\}?/g,""):r}function transCardArray(r){return"."===(r=r.replace(REG_CARD_ARRAY,r=>`.${r.slice(2,-2)}.`)).charAt(r.length-1)&&(r=r.slice(0,-1)),r}transExp.isExp=isExp,transExp.containExp=containExp,transExp.removeAllExpFix=removeAllExpFix,transExp.transExpForList=transExpForList,transExp.transCardArray=transCardArray,module.exports=transExp;