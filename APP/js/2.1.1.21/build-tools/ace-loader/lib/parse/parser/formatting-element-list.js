"use strict";const NOAH_ARK_CAPACITY=3;class FormattingElementList{constructor(t){this.length=0,this.entries=[],this.treeAdapter=t,this.bookmark=null}_getNoahArkConditionCandidates(t){const e=[];if(this.length>=NOAH_ARK_CAPACITY){const n=this.treeAdapter.getAttrList(t).length,i=this.treeAdapter.getTagName(t),s=this.treeAdapter.getNamespaceURI(t);for(let t=this.length-1;t>=0;t--){const r=this.entries[t];if(r.type===FormattingElementList.MARKER_ENTRY)break;const l=r.element,h=this.treeAdapter.getAttrList(l);this.treeAdapter.getTagName(l)===i&&this.treeAdapter.getNamespaceURI(l)===s&&h.length===n&&e.push({idx:t,attrs:h})}}return e.length<NOAH_ARK_CAPACITY?[]:e}_ensureNoahArkCondition(t){const e=this._getNoahArkConditionCandidates(t);let n=e.length;if(n){const i=this.treeAdapter.getAttrList(t),s=i.length,r=Object.create(null);for(let t=0;t<s;t++){const e=i[t];r[e.name]=e.value}for(let t=0;t<s;t++)for(let i=0;i<n;i++){const s=e[i].attrs[t];if(r[s.name]!==s.value&&(e.splice(i,1),n--),e.length<NOAH_ARK_CAPACITY)return}for(let t=n-1;t>=NOAH_ARK_CAPACITY-1;t--)this.entries.splice(e[t].idx,1),this.length--}}insertMarker(){this.entries.push({type:FormattingElementList.MARKER_ENTRY}),this.length++}pushElement(t,e){this._ensureNoahArkCondition(t),this.entries.push({type:FormattingElementList.ELEMENT_ENTRY,element:t,token:e}),this.length++}insertElementAfterBookmark(t,e){let n=this.length-1;for(;n>=0&&this.entries[n]!==this.bookmark;n--);this.entries.splice(n+1,0,{type:FormattingElementList.ELEMENT_ENTRY,element:t,token:e}),this.length++}removeEntry(t){for(let e=this.length-1;e>=0;e--)if(this.entries[e]===t){this.entries.splice(e,1),this.length--;break}}clearToLastMarker(){for(;this.length;){const t=this.entries.pop();if(this.length--,t.type===FormattingElementList.MARKER_ENTRY)break}}getElementEntryInScopeWithTagName(t){for(let e=this.length-1;e>=0;e--){const n=this.entries[e];if(n.type===FormattingElementList.MARKER_ENTRY)return null;if(this.treeAdapter.getTagName(n.element)===t)return n}return null}getElementEntry(t){for(let e=this.length-1;e>=0;e--){const n=this.entries[e];if(n.type===FormattingElementList.ELEMENT_ENTRY&&n.element===t)return n}return null}}FormattingElementList.MARKER_ENTRY="MARKER_ENTRY",FormattingElementList.ELEMENT_ENTRY="ELEMENT_ENTRY",module.exports=FormattingElementList;