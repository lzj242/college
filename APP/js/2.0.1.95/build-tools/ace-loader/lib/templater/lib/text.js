const reg="{{{(.+?)}}}|{{(.+?)}}",dataReg=new RegExp(reg,"g"),expressionReg=new RegExp(reg);function parseData(e){if(e=(e||"").toString().trim().replace(/\n/g,""),!expressionReg.test(e))return null;let t,a=0;const r=[];for(dataReg.lastIndex=0;;){let n=dataReg.exec(e);if(!n)break;checkBefore(t=n.index,a,e,r),parseValue(n,r),a=t+n[0].length}return a<e.length&&r.push({value:e.slice(a)}),r}function checkBefore(e,t,a,r){e>t&&r.push({value:a.slice(t,e)})}function parseValue(e,t){let a=/^{{{.*}}}$/.test(e[0])?e[1]:e[2];t.push({tag:!0,value:a.trim()})}exports.parseText=parseData;